import{a as axios$1,m as module_default}from"./userAuth-BI36wup4.js";window.axios=axios$1;window.axios.defaults.headers.common["X-Requested-With"]="XMLHttpRequest";axios$1.defaults.withCredentials=!0;function chooseSections(){return{tests:[],loading:!1,errorMessage:null,async fetchTests(){var t;this.loading=!0,this.errorMessage=null;try{const s=Alpine.store("userAuth");if(!(s!=null&&s.token)){this.errorMessage="🚫 Unauthorized: No token found.";return}axios$1.defaults.headers.common.Authorization=`Bearer ${s.token}`;const e=s.user;if(!e||!Array.isArray(e.roles)){this.errorMessage="🚫 Invalid user data.";return}const i=e.roles.map(a=>a.name),r=["student","super-admin"];if(!i.some(a=>r.includes(a))){this.errorMessage="🚫 Access denied.";return}const o=await axios$1.get("/student/display");this.tests=o.data.data}catch(s){this.errorMessage="❌ Failed to load tests.",console.error("FETCH ERROR:",s);const e=await axios$1.get("/student/display");console.log("✅ TEST RESPONSE:",e.data),this.tests=((t=e.data)==null?void 0:t.data)??e.data}finally{this.loading=!1}},loadQuestions(t){window.location.href=`/questions?test_id=${t}`},init(){this.fetchTests()}}}const state={questions:[],currentIndex:0,currentTitle:"Select a question",currentOptions:[],userAnswers:{},confirmedAnswers:{},totalSeconds:0,timeUp:!1,timeLeft:"",timer:null,progress:0,showPopup:!1,showHelp:!1,showContact:!1,showCalculator:!1,calcInput:"",showForm:!1,selectedTestFilter:"",calcButtons:["7","8","9","/","4","5","6","*","1","2","3","-","0","C","+","="],strikethroughAnswers:{},isSubmittingAnswer:{},showEndTestModal:!1,isDarkMode:!1,answerSent:!1,resultLoaded:!1,finalResult:{},showFilterPopup:!1,filter:{selected:""},testId:null};async function init(){var t;try{if(!(this!=null&&this.testId))return;this.toggleDarkMode(this.isDarkMode);const{data:s}=await axios.get(`/student/question/${this.testId}`);if(!((t=s==null?void 0:s.data)!=null&&t.length))return;this.questions=s.data,this.selectQuestion(0);const[e]=await Promise.all([axios.get("/user-answers"),this.startTimer()]);this.userAnswers=e.data,this.updateProgress()}catch{this.showPopup=!0,this.popupMessage="⚠️ Something went wrong. Please refresh and try again."}}async function submitAnswer(t,s){if(!(!this.questions.find(i=>i.id===t)||!(s!=null&&s.id))&&(this.isSubmittingAnswer=this.isSubmittingAnswer||{},!this.isSubmittingAnswer[t])){this.isSubmittingAnswer[t]=!0;try{await axios$1.post("/student/submit-answer",{question_id:t,answer_id:s.id}),this.confirmedAnswers[t]=s.id,this.answerSent=!0,setTimeout(()=>this.answerSent=!1,2e3)}catch(i){console.error("❌ Could not submit answer:",i),alert("❌ Could not submit answer.")}finally{this.isSubmittingAnswer[t]=!1}}}function selectQuestion(t){const s=this.questions[t];if(!s||!Array.isArray(s.answers)){console.warn("❌ Invalid question or missing answers at index:",t),this.currentTitle="⚠️ Question not available",this.currentOptions=[];return}this.currentIndex=t,this.currentTitle=s.question_text,this.currentOptions=s.answers}function updateProgress(){if(!Array.isArray(this.questions)){console.error("questions is not an array:",this.questions),this.progress=0;return}const t=this.questions.filter(s=>this.userAnswers[s.id]!==null&&this.userAnswers[s.id]!==void 0).length;this.progress=t/this.questions.length*100,t===this.questions.length&&!this.resultLoaded&&(this.resultLoaded=!0)}function toggleDarkMode(){this.isDarkMode=!this.isDarkMode,document.documentElement.classList.toggle("dark",this.isDarkMode),localStorage.setItem("darkMode",this.isDarkMode)}function selectAnswer(t,s,e){var a;if(this.isStrikethrough(t,e))return;const i=this.questions[t],r=i.id,n=i.answers.find(u=>u.id===s);if(!n){console.error("❌ answer not found:",s);return}this.userAnswers[r]===n.id&&this.confirmedAnswers[r]===n.id||(this.userAnswers[r]=n.id,(a=this.updateProgress)==null||a.call(this),submitAnswer.call(this,r,n))}function toggleStrikeThrough(t,s){this.strikethroughAnswers[t]||(this.strikethroughAnswers[t]={}),this.strikethroughAnswers[t][s]=!this.strikethroughAnswers[t][s],this.strikethroughAnswers[t][s]&&this.userAnswers[t]===this.questions[t].answers[s].answer_text&&(this.userAnswers[t]=null)}function isStrikethrough(t,s){return this.strikethroughAnswers[t]&&this.strikethroughAnswers[t][s]}const logger={info(t,s=null){console.groupCollapsed(`🔷 [INFO] ${t}`),s&&console.log(s),console.groupEnd()},warn(t,s=null){console.groupCollapsed(`⚠️ [WARN] ${t}`),s&&console.warn(s),console.groupEnd()},error(t,s=null){console.groupCollapsed(`❌ [ERROR] ${t}`),s&&(console.error(s),console.trace()),console.groupEnd()},success(t,s=null){console.groupCollapsed(`✅ [SUCCESS] ${t}`),s&&console.log(s),console.groupEnd()}};function prevQuestion(){this.currentIndex>0&&this.selectQuestion(this.currentIndex-1)}function nextQuestion(){this.currentIndex<this.questions.length-1?this.selectQuestion(this.currentIndex+1):this.showEndTestModal=!0}function updateTimerDisplay(t){let s=Math.floor(t/60),e=t%60;this.timeLeft=`${String(s).padStart(2,"0")}:${String(e).padStart(2,"0")}`}function startTimer(){this.timer&&(clearInterval(this.timer),this.timer=null);const t=36;this.totalSeconds=this.questions.length*t,this.updateTimerDisplay(this.totalSeconds),this.timer=setInterval(()=>{this.totalSeconds--,this.totalSeconds<=0?(clearInterval(this.timer),this.timer=null,this.timeUp=!0,this.endQuiz()):this.updateTimerDisplay(this.totalSeconds)},1e3)}function calculate(btn){if(btn==="C")this.calcInput="";else if(btn==="=")try{this.calcInput=eval(this.calcInput)}catch(t){this.calcInput="Error"}else this.calcInput+=btn}async function endQuiz(){if(this.timeUp=!0,clearInterval(this.timer),!this.questions.every(e=>this.userAnswers[e.id])){alert("❌ Please answer all questions before ending the quiz."),this.timeUp=!1;return}const s=()=>Object.values(this.isSubmittingAnswer||{}).some(e=>e===!0);for(;s();)console.log("⏳ Waiting for pending submissions..."),await new Promise(e=>setTimeout(e,200));try{const e=await axios.get(`/student/final-result/${this.testId}`);this.finalResult=e.data}catch(e){console.error("Failed to load result:",e),this.finalResult={correct:0,total:0,score:0}}this.resultLoaded=!0}function confirmEndQuiz(){this.timeUp=!0,clearInterval(this.timer),this.showEndTestModal=!1}function getAnswerClass(t,s){if(!this.resultLoaded)return"";const e=this.questions[t],i=e.answers[s],r=this.userAnswers[e.id],n=i.id===r,o=!!i.is_correct;return n&&o?"bg-green-500 text-white border-green-700":n&&!o?"bg-red-500 text-white border-red-700":!n&&o?"bg-green-200 text-green-800 border-green-300":""}async function clearAnswersAndRestart(){try{await axios$1.post("/student/clear-answers"),console.log("✅ Answers cleared from DB")}catch{alert("Error clearing answers from server");return}this.userAnswers={},this.confirmedAnswers={},this.strikethroughAnswers={},this.updateProgress(),this.currentIndex=0,this.resultLoaded=!1,this.finalResult={},this.timeUp=!1,this.startTimer(),this.selectQuestion(0)}function goToHome(){window.location.href="/"}function getFilteredQuestions(t,s,e){const i=e.selected;return t.filter(r=>{const n=Object.prototype.hasOwnProperty.call(s,r.id)&&s[r.id]!==null&&s[r.id]!=="",o=r.isFlagged===!0;return i==="answered"?n:i==="unanswered"?!n:i==="flagged"?o:!0})}module_default.data("quizManager",()=>({...state,logger,init,selectQuestion,selectQuestionById(t){const s=this.questions.findIndex(e=>e.id===t);s!==-1?this.selectQuestion(s):console.warn("❌ Question not found for ID:",t)},nextQuestion,submitAnswer,prevQuestion,selectAnswer,toggleStrikeThrough,isStrikethrough,updateProgress,toggleDarkMode,updateTimerDisplay,startTimer,calculate,endQuiz,confirmEndQuiz,getAnswerClass,clearAnswersAndRestart,goToHome,chooseSections,get visibleQuestions(){return getFilteredQuestions(this.questions,this.userAnswers,this.filter)},watch:{"filter.selected":function(){this.currentIndex=0;const t=this.visibleQuestions[0];if(t){const s=this.questions.findIndex(e=>e.id===t.id);s!==-1&&this.selectQuestion(s)}}}}));export{chooseSections as c};
